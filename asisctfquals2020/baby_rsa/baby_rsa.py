#!/usr/bin/python

from Crypto.Util.number import *
import random
# from flag import flag
flag = "REDACTED"

N = 10594734342063566757448883321293669290587889620265586736339477212834603215495912433611144868846006156969270740855007264519632640641698642134252272607634933572167074297087706060885814882562940246513589425206930711731882822983635474686630558630207534121750609979878270286275038737837128131581881266426871686835017263726047271960106044197708707310947840827099436585066447299264829120559315794262731576114771746189786467883424574016648249716997628251427198814515283524719060137118861718653529700994985114658591731819116128152893001811343820147174516271545881541496467750752863683867477159692651266291345654483269128390649
nbit = 512
while True:
	p = getPrime(nbit)
	q = getPrime(nbit)
	if p*q == N:
		print p, q
		exit(0)
	continue
	e, n = 65537, p*q
	phi = (p-1)*(q-1)
	d = inverse(e, phi)
	r = random.randint(12, 19)
	if (d-1) % (1 << r) == 0:
		# print p, q, e, d, r
		break

s, t = random.randint(1, min(p, q)), random.randint(1, min(p, q))
t_p = pow(s*p + 1, (d-1)/(1 << r), n)
t_q = pow(t*q + 4, (d-1)/(1 << r), n)
"""
(sp + 1)(tq + 4) = (sptq + 4sp + tq + 4) ^ (d-1)>>r
k^(d-1)*e == k^1*k^-e = k^(-e+1) %n
"""
print 'n =', n
print 't_p =', t_p
print 't_q =', t_q
print 'enc =', pow(bytes_to_long(flag), e, n)